
# Employee Management System

A full-stack Employee Management System built with **Next.js**, **React**, **Apollo GraphQL**, **MongoDB**, and **TypeScript**, styled with Tailwind CSS.

---

## Project Structure

```
Task/
├── frontend/       # Next.js frontend application
├── backend/        # Node.js + GraphQL backend
└── README.md       # Project documentation
```

---

## Prerequisites

- Node.js >= 20.x
- npm >= 9.x
- MongoDB account / MongoDB Atlas cluster
- Git (optional, if cloning from a repository)

---

## Backend Setup

1. Navigate to the backend folder:

```bash
cd backend
```

2. Install dependencies:

```bash
npm install
```

3. Create a `.env` file in the `backend` folder with the following variables:

```env
PORT=4000
NODE_ENV=development
MONGO_URL=<your-mongodb-connection-string>
DB_NAME=employee-directory
```

> Replace `<your-mongodb-connection-string>` with your actual MongoDB connection URI. Example for MongoDB Atlas:
>
> ```
> mongodb+srv://username:password@cluster0.mongodb.net
> ```

4. Seed initial data (optional):

```bash
npm run seed
```

5. Start the backend server:

```bash
npm run dev
```

The backend GraphQL API will run at: `http://localhost:4000/graphql`

---

## Frontend Setup

1. Navigate to the frontend folder:

```bash
cd frontend
```

2. Install dependencies:

```bash
npm install
```

3. Create a `.env` file in the `frontend` folder with:

```env
NEXT_PUBLIC_GRAPHQL_URL=http://localhost:4000/graphql
```

4. Start the development server:

```bash
npm run dev
```

The frontend app will run at: `http://localhost:3000`

---

## Available Scripts

### Backend

```bash
npm run dev      # Run in development mode
npm run build    # Compile TypeScript files
npm run start    # Start production server
npm run seed     # Seed database
```

### Frontend

```bash
npm run dev      # Run Next.js development server
npm run build    # Build production version
npm run start    # Start production server
npm run lint     # Run ESLint
```

---

## Technologies Used

- **Frontend**: Next.js, React, Apollo Client, Tailwind CSS, TypeScript, Radix UI
- **Backend**: Node.js, Apollo Server, GraphQL, MongoDB, Zod
- **Tools**: ESLint, Prettier, tsx, ts-node-dev

---
